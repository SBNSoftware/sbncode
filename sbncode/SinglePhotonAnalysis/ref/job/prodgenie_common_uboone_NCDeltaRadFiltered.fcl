#include "services_microboone.fcl"
#include "genie_microboone_default+MEC.fcl"
#include "filters.fcl" 

process_name: GenieGenFiltered

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genie_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     {} # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   5000          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::microboone_genie_simple
   rns:       { module_type: "RandomNumberSaver" }
 }

 filters:
 {

   NCDeltaRadFilter:
   {
     module_type: "NCDeltaRadiative"
   }

 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, NCDeltaRadFilter]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "prodgenie_bnb_nu_filtered_NCDeltaRad_uboone_%tc_gen.root"
   dataTier:    "generated"
   SelectEvents: [ simulate ]
   compressionLevel: 1
 }
}

outputs.out1.fileName: "prodgenie_bnb_nu_filtered_NCDeltaRad_uboone_%tc_gen.root"

source.maxEvents: 100

physics.producers.generator: @local::microboone_genie_simple
physics.producers.generator.GlobalTimeOffset: 3125.
physics.producers.generator.RandomTimeOffset: 1600.
physics.producers.generator.TopVolume: "volTPC"
physics.producers.generator.BeamName: "booster"
physics.producers.generator.EventGeneratorList: "NCRES"
physics.producers.generator.GeomScan:     "flux: 10000 1.3 1"

