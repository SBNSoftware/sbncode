#include "simulationservices_icarus.fcl"
#include "services_icarus.fcl"

#include "larproperties.fcl"
#include "backtrackerservice.fcl"
#include "particleinventoryservice.fcl"
#include "detectorproperties_icarus.fcl"
#include "photonbacktrackerservice.fcl"
#include "mccheatermodules.fcl"
#include "simulationservices_icarus.fcl"
#include "spacecharge.fcl"


#include "mcsproducer.fcl"
#include "rangeproducer.fcl"
#include "calorimetry_icarus.fcl"
#include "particleid.fcl"
#include "trackareahit_producer.fcl"
#include "trackhitfilter_module.fcl"

process_name: CaloAna

services:
{
  # @table::icarus_detsim_services
  RandomNumberGenerator: {} #ART native random number generator
  TFileService: { 
    fileName: "alorimetryout.root"
  }
  message:      { debugModules: ["*"] destinations: { debugmsg:{type: "cout" threshold: "INFO"} } }
  TimeTracker:  { printSummary: true }
  AuxDetExptGeoHelperInterface: { service_provider: "icaruscode/CRT/CRTGeometryHelper" }
  BackTrackerService:  @local::standard_backtrackerservice
  ParticleInventoryService: @local::standard_particleinventoryservice
  SpaceCharge: @local::standard_spacecharge
  @table::icarus_basic_services
  @table::icarus_backtracking_services
}

services.Geometry: @local::icarus_single_induction_nooverburden_geometry
services.ExpGeoHelperInterface: @local::icarus_single_induction_geometry_helper
services.SpaceCharge.EnableSimEfield : false
services.SpaceCharge.EnableSimEfield : false
services.SpaceCharge.InputFilename: "SCEoffsets/SCEoffsets_ICARUS_E500_voxelTH3.root"
services.SpaceCharge.RepresentationType: "Voxelized_TH3"
services.SpaceCharge.service_provider: SpaceChargeServiceICARUS
services.PhotonBackTrackerService: @erase

# services.IFBeam: {}
# services.BackTracker: @local::standard_backtracker

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}

outputs:
{
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  producers:{
    mergeIdent: {
      module_type: MergedTrackIdentifier
      PFPLabel: pandoraGausCryo1
      TrackLabel: pandoraTrackGausCryo1
    }

    trackSplit: {
      module_type: TrackSplitter
      TrackLabel: pandoraTrackGausCryo1
      MergedPFPLabel: mergeIdent
    }

    trackSplitCalo: {
      module_type: GnocchiCalorimetry
      TrackModuleLabel: trackSplit
      T0ModuleLabel: ""
      AssocHitModuleLabel: ""
      PFPModuleLabel: ""
      ChargeMethod: 1
      FieldDistortionEfield: false
      FieldDistortion: false
      TrackIsFieldDistortionCorrected: false
      FieldDistortionCorrectionXSign: 1.
      Cryostat: 1
      CaloAlg: @local::icarus_calorimetryalgmc
    }

    filtgoodhit: {
      module_type: TrackHitFilter
      TrackLabel: pandoraTrackGausCryo1
    }

    filtgoodhitsplit: {
      module_type: TrackHitFilter
      TrackLabel: trackSplit
    }

    gnewcalo: {
      module_type: GnocchiCalorimetry
      TrackModuleLabel: pandoraTrackGausCryo1
      T0ModuleLabel: ""
      AssocHitModuleLabel: ""
      PFPModuleLabel: ""
      ChargeMethod: 1
      FieldDistortionEfield: false
      FieldDistortion: false
      TrackIsFieldDistortionCorrected: false
      FieldDistortionCorrectionXSign: 1.
      Cryostat: 1
      CaloAlg: @local::icarus_calorimetryalgmc
    }

  }

  analyzers:
  {
    caloana: {
      module_type: CalorimetryAnalysis
      HitFilterproducer: "filtgoodhit"
      CALOproducer: "gnewcalo"
      PIDproducer:  ""
      TRKproducer:  "pandoraTrackGausCryo1"
      PFPproducer: "pandoraGausCryo1"
      ADCtoE: [] 
      HitProducers: ["gaushitTPC0", "gaushitTPC1", "gaushitTPC2", "gaushitTPC3"]
    }
    calosplitana: {
      module_type: CalorimetryAnalysis
      HitFilterproducer: "filtgoodhitsplit"
      CALOproducer: "trackSplitCalo"
      PIDproducer:  ""
      TRKproducer:  "trackSplit"
      PFPproducer: "pandoraGausCryo1"
      ADCtoE: [] 
      HitProducers: ["gaushitTPC0", "gaushitTPC1", "gaushitTPC2", "gaushitTPC3"]
    }
  }

  filters: {
    filter: {
      module_type: EventSelect
      Select: ["1:1", "1:19", "1:46", "2:6", "2:23", "2:46", "3:16", "5:1", "5:42", "5:48", "6:7", "6:11", "6:18", "7:5", "7:15", "7:34", "8:21", "8:42", "9:36", "10:18", "11:48", "12:30", "12:34", "12:43", "12:50", "14:21", "14:22", "15:7", "15:26", "16:26", "16:34", "16:50", "17:4", "17:41", "18:4", "18:13", "18:29", "18:36", "19:28", "20:4", "20:15", "20:42", "21:21", "22:12", "22:42", "23:15", "24:8", "24:23", "25:30", "25:35", "25:36", "25:42", "25:44", "26:13", "26:30", "26:35", "27:19", "28:8", "28:17", "28:19", "29:12", "29:17", "29:22", "30:13", "30:49", "31:39", "32:35", "33:49", "34:36", "34:50", "35:38", "36:17", "36:19", "36:27", "36:42", "36:50", "37:30", "38:24", "38:31", "39:4", "39:26", "39:30", "39:32", "39:44", "39:49", "40:4", "40:8", "40:27", "40:48", "41:11", "41:32", "42:3", "42:9", "43:14", "44:45", "45:13", "46:12", "46:29", "46:45"]
    }
  }

  runprod: [filter, filtgoodhit, gnewcalo, mergeIdent, trackSplit, filtgoodhitsplit, trackSplitCalo, caloana, calosplitana]
  stream1:       [ ]
  trigger_paths: [ runprod ] 
  end_paths:     [ stream1 ]
}
